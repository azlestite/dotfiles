[include]
  path = ~/.config/git/config.local
[user]
  useConfigOnly = true
[core]
  autocrlf = input
  safecrlf = true
  quotepath = false
  filemode = false
  precomposeunicode = true
  ignorecase = false
  excludesfile = ~/.config/git/ignore
  editor = nvim
  hooksPath = ~/.config/git/hooks
[color]
  ui = auto
[status]
  showUntrackedFiles = all
[merge]
  ff = false
[pull]
  rebase = preserve
[push]
  default = simple
[alias]
  alias = !git config --get-regexp '^alias\\.' | sed 's/alias\\.\\([^ ]*\\) \\(.*\\)/\\1\\\t => \\2/g' | sort
  a = add
  b = branch
  bb = branch -vv --all
  # delete branch(es) with fzf
  db = "!f () {\
    if [ $# -eq 0 -a `which fzf` ]; then\
      git branch --sort=authordate | grep -v master | fzf -m --ansi --prompt='delete branch(es)\\> ' | tr -d ' \\*' | xargs git branch -d;\
    elif [ $# -ge 1 ]; then\
      git branch | grep -v master | grep ${@} | xargs git branch -d;\
    fi;\
  };f"
  # checkout with fzf
  co = "!f () {\
    if [ $# -eq 0 -a `which fzf` ]; then\
      git branch --sort=authordate | fzf --ansi --prompt='checkout\\> ' | tr -d ' \\*' | xargs -n 1 git checkout;\
    elif [ $# -ge 1 ]; then\
      git checkout ${@};\
    fi;\
  };f"
  # merge branch with fzf
  mb = "!f () {\
    if [ `which fzf` ]; then\
      git branch -a | grep -v '\\->' | sed -e 's/remotes\\///g' | fzf --ansi --layout=reverse --header='all-branch' --prompt='merge\\> ' --query=${@} | tr -d ' \\*' | xargs -n 1 git merge;\
    elif [ $# -ge 1 ]; then\
      git merge ${@};\
    fi;\
  };f"
  # cherry-pick with fzf
  cp = "!f () {\
    if [ $# -eq 0 -a `which fzf` ]; then\
      git log --branches --oneline | fzf -m --ansi --header='commit-log' --prompt='cherry-pick\\> ' | awk '{print $1}' | xargs git cherry-pick;\
    elif [ $# -ge 1 ]; then\
      git cherry-pick ${@};\
    fi;\
  };f"
  # show merged branch except master and current branch
  mg = "!f () {\
    git branch --merged | grep -v master | grep -v '*';\
  };f"
  ci = commit
  ca = commit --amend --date=now
  d = diff
  dc = diff --cached
  f = fetch
  fp = fetch --prune --all
  l = log --graph --date=short --pretty=format:'%x09%C(magenta)%h %C(cyan)%cd %C(green)%an %Creset%s%C(red)%d%Creset'
  ll = log --all --graph --numstat --decorate=full --date=format:'%Y-%m-%d %H:%M:%S' --pretty=format:'%C(magenta)%h%C(red)%d %Creset<%C(green)%an%Creset> [%C(yellow)%cd%Creset]%n%C(cyan bold)%w(70)%s%n%w(74,2,2)%b'
  remotes = remote -v
  sh = show
  s = status
  ss = status --short --branch
  url = config --get remote.origin.url
[ghq]
  root = ~/go/src
