# ------------------------------
# denite.nvim
# ------------------------------
[[plugins]]
repo = 'Shougo/denite.nvim'
if = "has('nvim')"
on_cmd = 'Denite'
depends = ['neomru.vim', 'neoyank.vim']
hook_add = '''
  " prefix
  nnoremap [denite] <Nop>
  nmap <Space>d [denite]
  " list files in the current directory
  nnoremap <silent> [denite]f :<C-u>Denite file/rec<CR>
  " list buffer
  nnoremap <silent> [denite]b :<C-u>Denite buffer<CR>
  " list most recently used buffer
  nnoremap <silent> [denite]m :<C-u>Denite file_mru<CR>
  " grep
  nnoremap <silent> [denite]g :<C-u>Denite grep -buffer-name=denite-grep-buffer<CR>
  " grep the word on the cursor
  nnoremap <silent> [denite]gg :<C-u>DeniteCursorWord grep -buffer-name=denite-grep-buffer<CR>
  " resume grep buffer
  nnoremap <silent> [denite]r :<C-u>Denite -resume -buffer-name=denite-grep-buffer<CR>
  " jump to next grep result
  nnoremap <silent> [denite]n :<C-u>Denite -resume -buffer-name=denite-grep-buffer -immediately -select=+1<CR>
  " jump to previous grep result
  nnoremap <silent> [denite]p :<C-u>Denite -resume -buffer-name=denite-grep-buffer -immediately -select=-1<CR>
  " search current buffer
  nnoremap <silent> [denite]l :<C-u>Denite line<CR>
  nnoremap <silent> [denite]ll :<C-u>DeniteCursorWord line<CR>
  " change filetype
  nnoremap <silent> [denite]t :<C-u>Denite filetype<CR>
  " yank
  nnoremap <silent> [denite]y :<C-u>Denite neoyank<CR>
'''
hook_post_source = '''
  " set file/rec command
  if executable('fd')
    call denite#custom#var('file/rec', 'command', ['fd', '--follow', '--hidden', '--exclude', '.git', '--type', 'f', ''])
  elseif executable('rg')
    call denite#custom#var('file/rec', 'command', ['rg', '--files', '--glob', '!.git'])
  elseif executable('pt')
    call denite#custom#var('file/rec', 'command', ['pt', '--follow', '--nocolor', '--nogroup', (has('win32') ? '-g:': '-g='), ''])
  elseif executable('ag')
    call denite#custom#var('file/rec', 'command', ['ag', '--follow', '--nocolor', '--nogroup', '-g', ''])
  endif
  " set grep command
  if executable('rg')
    call denite#custom#var('grep', 'command', ['rg'])
    call denite#custom#var('grep', 'default_opts', ['--vimgrep', '--no-heading'])
    call denite#custom#var('grep', 'recursive_opts', [])
    call denite#custom#var('grep', 'pattern_opt', ['--regexp'])
    call denite#custom#var('grep', 'separator', ['--'])
    call denite#custom#var('grep', 'final_opts', [])
  elseif executable('pt')
    call denite#custom#var('grep', 'command', ['pt'])
    call denite#custom#var('grep', 'default_opts', ['--nogroup', '--nocolor', '--smart-case'])
    call denite#custom#var('grep', 'recursive_opts', [])
    call denite#custom#var('grep', 'pattern_opt', [])
    call denite#custom#var('grep', 'separator', ['--'])
    call denite#custom#var('grep', 'final_opts', [])
  elseif executable('ag')
    call denite#custom#var('grep', 'command', ['ag'])
    call denite#custom#var('grep', 'default_opts', ['-i', '--vimgrep'])
    call denite#custom#var('grep', 'recursive_opts', [])
    call denite#custom#var('grep', 'pattern_opt', [])
    call denite#custom#var('grep', 'separator', ['--'])
    call denite#custom#var('grep', 'final_opts', [])
  endif
  " ignore globs
  call denite#custom#filter('matcher/ignore_globs', 'ignore_globs',
    \ ['.git/', '__pycache__/', 'fonts/', 'img/', 'images/',
    \ '*.make', '*.min.*', '*.o'])
  " set matcher
  call denite#custom#source('file/rec,grep', 'matchers', ['matcher/cpsm'])
  " move to previous/next line in denite insert mode
  call denite#custom#map('insert', '<C-k>', '<denite:move_to_previous_line>', 'noremap')
  call denite#custom#map('insert', '<C-j>', '<denite:move_to_next_line>', 'noremap')
  " open the object in the next tab
  call denite#custom#map('insert', '<C-t>', '<denite:do_action:tabopen>', 'noremap')
  " open the object with vertical split
  call denite#custom#map('insert', '<C-v>', '<denite:do_action:vsplit>', 'noremap')
  call denite#custom#map('normal', 'v', '<denite:do_action:vsplit>', 'noremap')
  " enter to normal mode
  call denite#custom#map('insert', 'jj', '<denite:enter_mode:normal>', 'noremap')
'''

[[plugins]]
repo = 'Shougo/neomru.vim'
on_source = ['denite.nvim', 'unite.vim']
on_path = '.*'

[[plugins]]
repo = 'Shougo/neoyank.vim'
depends = 'denite.nvim'

# ------------------------------
# Completion
# ------------------------------
[[plugins]]
repo = 'Shougo/deoplete.nvim'
if = "has('nvim')"
on_i = 1
hook_source = '''
  let g:deoplete#enable_at_startup = 1
  inoremap <expr><Tab> pumvisible() ? "\<C-n>" :
    \ neosnippet#expandable_or_jumpable() ?
    \   "\<Plug>(neosnippet_expand_or_jump)" : "\<Tab>"
  inoremap <expr><S-Tab> pumvisible() ? "\<C-p>" : "\<S-Tab>"
  " close popup and delete backword char
  inoremap <expr><C-h> deoplete#smart_close_popup()."\<C-h>"
  inoremap <expr><BS>  deoplete#smart_close_popup()."\<C-h>"
  " undo
  inoremap <expr><C-g> deoplete#undo_completion()
  " close popup and save indent
  inoremap <silent> <CR> <C-r>=<SID>my_cr_function()<CR>
  function! s:my_cr_function() abort
    return deoplete#close_popup() . "\<CR>"
  endfunction
  " close preview window on leaving insert mode or completion
  autocmd MyAutoCmd InsertLeave,CompleteDone *
    \ if pumvisible() == 0 | pclose | endif
'''

[[plugins]]
repo = 'zchee/deoplete-jedi'
on_i = 1
on_ft = 'python'

[[plugins]]
repo = 'cohama/lexima.vim'
on_i = 1

# ------------------------------
# Snippet
# ------------------------------
[[plugins]]
repo = 'Shougo/neosnippet.vim'
depends = ['neosnippet-snippets']
on_i = 1
on_ft = ['snippet']
hook_source = '''
  " expand if snippet exists or jump to next
  imap <C-k> <Plug>(neosnippet_expand_or_jump)
  smap <C-k> <Plug>(neosnippet_expand_or_jump)
  xmap <C-k> <Plug>(neosnippet_expand_target)
  if has('conceal')
    set conceallevel=2 concealcursor=niv
  endif
'''

[[plugins]]
repo = 'Shougo/neosnippet-snippets'

# ------------------------------
# Syntax
# ------------------------------
[[plugins]]
repo = 'cespare/vim-toml'
on_ft = 'toml'

# ------------------------------
# Align
# ------------------------------
[[plugins]]
repo = 'junegunn/vim-easy-align'
on_map = ['<Plug>(EasyAlign)']
on_cmd = ['EasyAlign']
hook_add = '''
  xmap ga <Plug>(EasyAlign)
  nmap ga <Plug>(EasyAlign)
'''

# ------------------------------
# Text object
# ------------------------------
[[plugins]]
repo = 'rhysd/vim-operator-surround'
depends = 'vim-operator-user'
on_map = {n = '<Plug>'}
hook_add = '''
  nmap <silent> sa <Plug>(operator-surround-append)
  nmap <silent> sd <Plug>(operator-surround-delete)
  nmap <silent> sr <Plug>(operator-surround-replace)
'''

# ------------------------------
# Comment
# ------------------------------
[[plugins]]
repo = 'tomtom/tcomment_vim'
on_map = ['gc', 'g<', 'g>', '<C-_>', '<Leader>_']

# ------------------------------
# ctags
# ------------------------------
[[plugins]]
repo = 'majutsushi/tagbar'
on_cmd = ['TagbarToggle']
hook_add = '''
  nnoremap <F8> :<C-u>TagbarToggle<CR>
'''

# ------------------------------
# *env
# ------------------------------
[[plugins]]
repo = 'jmcantrell/vim-virtualenv'
on_ft = ['python']

# ------------------------------
# Python
# ------------------------------
[[plugins]]
repo = 'davidhalter/jedi-vim'
on_ft = 'python'
hook_source = '''
  let g:jedi#auto_vim_configuration = 0
  let g:jedi#completions_enabled = 0
  nnoremap [jedi] <Nop>
  nmap <Space>j [jedi]
  let g:jedi#goto_command = "[jedi]d"
  let g:jedi#goto_assignments_command = "[jedi]g"
  let g:jedi#documentation_command = "[jedi]k"
  let g:jedi#rename_command = "[jedi]r"
  let g:jedi#usages_command = "[jedi]n"
'''

[[plugins]]
repo = 'Vimjas/vim-python-pep8-indent'
on_ft = 'python'

# ------------------------------
# Statusline
# ------------------------------
[[plugins]]
repo = 'osyo-manga/vim-anzu'
on_map = ['<Plug>(anzu-']
hook_source = '''
  nmap n nzz<Plug>(anzu-update-search-status)
  nmap N Nzz<Plug>(anzu-update-search-status)
  nmap * *zz<Plug>(anzu-update-search-status)
  nmap # #zz<Plug>(anzu-update-search-status)
  " clear status
  nmap <silent> <Esc><Esc> :<C-u>nohlsearch<CR><Plug>(anzu-clear-search-status)
  augroup MyAutoCmd
    autocmd CursorHold,CursorHoldI,WinLeave,TabLeave *
      \ call anzu#clear_search_status()
  augroup END
'''
